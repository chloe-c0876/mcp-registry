"use strict";var P=Object.create;var w=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var E=(t,e)=>{for(var s in e)w(t,s,{get:e[s],enumerable:!0})},S=(t,e,s,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of D(e))!$.call(t,i)&&i!==s&&w(t,i,{get:()=>e[i],enumerable:!(r=k(e,i))||r.enumerable});return t};var u=(t,e,s)=>(s=t!=null?P(A(t)):{},S(e||!t||!t.__esModule?w(s,"default",{value:t,enumerable:!0}):s,t)),I=t=>S(w({},"__esModule",{value:!0}),t);var L={};E(L,{activate:()=>R,deactivate:()=>K});module.exports=I(L);var o=u(require("vscode"));var n=u(require("vscode")),b=class extends n.TreeItem{constructor(s,r,i){super(r,n.TreeItemCollapsibleState.None);this.id=s;this.label=r;this.description=i;this.tooltip=`${this.label} - ${this.description}`,this.contextValue="mcpTool",this.iconPath=new n.ThemeIcon("tools")}},g=class extends n.TreeItem{constructor(s,r,i,c,a,d){super(r,n.TreeItemCollapsibleState.Collapsed);this.id=s;this.label=r;this.description=i;this.version=c;this.owner=a;this.tooltip=`${this.label} - ${this.description}`,this.contextValue="mcpServer",this.iconPath=new n.ThemeIcon("server"),this.serverData=d,d.tools&&Array.isArray(d.tools)&&(this.tools=d.tools.map((M,x)=>new b(`${this.id}-tool-${x}`,M.name,M.description||"")))}tools=[];serverData},f=class{constructor(e,s){this.apiClient=e;this.authManager=s}_onDidChangeTreeData=new n.EventEmitter;onDidChangeTreeData=this._onDidChangeTreeData.event;servers=[];refresh(){this.loadServers(),this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return e?e instanceof g?Promise.resolve(e.tools):Promise.resolve([]):Promise.resolve(this.servers)}async loadServers(){try{let e=await this.authManager.getToken(),s=await this.authManager.isAuthenticationDisabled(),r=await this.apiClient.getServers(void 0,50,e);this.servers=r.servers.map(i=>new g(i.id,i.name,i.description,i.version,i.owner,i))}catch(e){console.error("Failed to load MCP servers:",e),this.servers=[],await this.authManager.isAuthenticationDisabled()?n.window.showErrorMessage("Failed to load MCP servers. Check your API connection."):n.window.showErrorMessage('Failed to load MCP servers. Please authenticate first using "KP_MCP: Authenticate with Registry"')}}};var C=u(require("vscode")),v=class{baseUrl;constructor(){let e=C.workspace.getConfiguration("mcpRegistry");this.baseUrl=e.get("apiBaseUrl","http://localhost:5000")}async getServers(e,s=50,r){let i=new URL(`${this.baseUrl}/v0/servers`);e&&i.searchParams.append("q",e),i.searchParams.append("limit",s.toString());let c={};r&&(c.Authorization=`Bearer ${r}`);let a=await fetch(i.toString(),{headers:c});if(!a.ok)throw new Error(`Failed to fetch servers: ${a.statusText}`);return await a.json()}async getServerDetails(e,s){let r={};s&&(r.Authorization=`Bearer ${s}`);let i=await fetch(`${this.baseUrl}/v0/servers/${encodeURIComponent(e)}`,{headers:r});if(!i.ok)throw new Error(`Failed to fetch server details: ${i.statusText}`);return await i.json()}async publishServer(e,s,r){let i=`${s}/${e.name.toLowerCase().replace(/\s+/g,"-")}`,c={...e,id:i},a=await fetch(`${this.baseUrl}/v0/servers`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(c)});if(!a.ok){let d=await a.text();throw new Error(`Failed to publish server: ${a.statusText} - ${d}`)}}async updateServer(e,s,r){let i=await fetch(`${this.baseUrl}/v0/servers/${encodeURIComponent(e)}`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(s)});if(!i.ok){let c=await i.text();throw new Error(`Failed to update server: ${i.statusText} - ${c}`)}}async deleteServer(e,s){let r=await fetch(`${this.baseUrl}/v0/servers/${encodeURIComponent(e)}`,{method:"DELETE",headers:{Authorization:`Bearer ${s}`}});if(!r.ok){let i=await r.text();throw new Error(`Failed to delete server: ${r.statusText} - ${i}`)}}async getAuthToken(){let e=await fetch(`${this.baseUrl}/dev/token`);if(!e.ok)throw new Error(`Failed to get auth token: ${e.statusText}`);return(await e.json()).access_token}async checkApiHealth(){try{return(await fetch(`${this.baseUrl}/v0/health`)).ok}catch{return!1}}};var p=u(require("vscode"));var y=class t{constructor(e){this.context=e;this.apiClient=new v}static TOKEN_KEY="mcpRegistry.authToken";static AUTH_DISABLED_KEY="mcpRegistry.authDisabled";apiClient;async authenticate(){try{if(!await this.apiClient.checkApiHealth()){p.window.showErrorMessage("Cannot connect to MCP Registry API. Please ensure it is running at the configured URL.");return}p.window.showInformationMessage("Authenticating with MCP Registry...");let s=await this.apiClient.getAuthToken();await this.storeToken(s),p.window.showInformationMessage("Successfully authenticated with MCP Registry!")}catch(e){p.window.showErrorMessage(`Authentication failed: ${e}`)}}async disableAuthentication(){await this.context.globalState.update(t.AUTH_DISABLED_KEY,!0),p.window.showInformationMessage("Authentication disabled for development. API calls will be made without tokens.")}async enableAuthentication(){await this.context.globalState.update(t.AUTH_DISABLED_KEY,!1),p.window.showInformationMessage("Authentication enabled. Please authenticate to access the API.")}async isAuthenticationDisabled(){return this.context.globalState.get(t.AUTH_DISABLED_KEY,!1)}async getToken(){if(!await this.isAuthenticationDisabled())return await this.context.secrets.get(t.TOKEN_KEY)}async storeToken(e){await this.context.secrets.store(t.TOKEN_KEY,e)}async clearToken(){await this.context.secrets.delete(t.TOKEN_KEY)}async isAuthenticated(){return!!await this.getToken()}async logout(){await this.clearToken(),p.window.showInformationMessage("Logged out from MCP Registry")}};var h,m,l;function R(t){console.log("MCP Registry extension is now active!"),m=new v,l=new y(t),h=new f(m,l),o.commands.executeCommand("setContext","mcpRegistryEnabled",!0),o.window.registerTreeDataProvider("mcpServerExplorer",h),[o.commands.registerCommand("mcpRegistry.refreshServers",()=>{h.refresh(),o.window.showInformationMessage("MCP Server list refreshed")}),o.commands.registerCommand("mcpRegistry.authenticate",async()=>{await l.authenticate()}),o.commands.registerCommand("mcpRegistry.disableAuth",async()=>{await l.disableAuthentication(),h.refresh()}),o.commands.registerCommand("mcpRegistry.enableAuth",async()=>{await l.enableAuthentication()}),o.commands.registerCommand("mcpRegistry.publishServer",async()=>{await U()}),o.commands.registerCommand("mcpRegistry.createServerConfig",async()=>{await T()}),o.commands.registerCommand("mcpRegistry.viewServerDetails",async r=>{await F(r)}),o.commands.registerCommand("mcpRegistry.updateServer",async r=>{await _(r)}),o.commands.registerCommand("mcpRegistry.deleteServer",async r=>{await B(r)})].forEach(r=>t.subscriptions.push(r)),o.workspace.getConfiguration("mcpRegistry").get("autoRefresh",!0)&&h.refresh()}async function U(){try{let t=await l.getToken();if(!t){o.window.showErrorMessage("Please authenticate first");return}let e=await o.workspace.findFiles("**/server.json","**/node_modules/**");if(e.length===0){await o.window.showInformationMessage("No server.json found. Create one?","Create Config","Cancel")==="Create Config"&&await T();return}let s=e[0];if(e.length>1){let a=await o.window.showQuickPick(e.map(d=>({label:o.workspace.asRelativePath(d),file:d})),{placeHolder:"Select server configuration to publish"});if(!a)return;s=a.file}let r=await o.workspace.fs.readFile(s),i=JSON.parse(r.toString()),c=await o.window.showInputBox({prompt:"Enter namespace (e.g., kp.internal.example)",value:"kp.internal.example",validateInput:a=>!a||!a.match(/^kp\.(internal|public|experimental)\./)?"Namespace must start with kp.internal., kp.public., or kp.experimental.":null});if(!c)return;await m.publishServer(i,c,t),o.window.showInformationMessage("Server published successfully!"),h.refresh()}catch(t){o.window.showErrorMessage(`Failed to publish server: ${t}`)}}async function T(){let t=await o.window.showInputBox({prompt:"Server Name",placeHolder:"My MCP Server"});if(!t)return;let e=await o.window.showInputBox({prompt:"Server Description",placeHolder:"What does your server do?"});if(!e)return;let s=await o.window.showInputBox({prompt:"Server Endpoint URL",placeHolder:"https://api.example.com/mcp"});if(!s)return;let r={name:t,description:e,version:"1.0.0",endpoint:s,tools:[{name:"example_tool",description:"An example tool"}],auth_methods:["bearer"],team:"Development Team",tags:["example"],metadata:{name:t,endpoint:s,tools:[{name:"example_tool"}],auth_methods:["bearer"]}},i=o.workspace.workspaceFolders?.[0];if(!i){o.window.showErrorMessage("No workspace folder open");return}let c=o.Uri.joinPath(i.uri,"server.json");await o.workspace.fs.writeFile(c,Buffer.from(JSON.stringify(r,null,2)));let a=await o.workspace.openTextDocument(c);await o.window.showTextDocument(a),o.window.showInformationMessage("Server configuration created!")}async function F(t){try{let e=await l.getToken(),s=await m.getServerDetails(t.id,e),r=o.window.createWebviewPanel("mcpServerDetails",`MCP Server: ${t.label}`,o.ViewColumn.One,{enableScripts:!1});r.webview.html=H(s)}catch(e){await l.isAuthenticationDisabled()?o.window.showErrorMessage(`Failed to load server details: ${e}`):o.window.showErrorMessage(`Failed to load server details: ${e}. Try authenticating first.`)}}async function _(t){o.window.showInformationMessage(`Update server ${t.label} - Feature coming soon!`)}async function B(t){let e=await l.getToken();if(!e){o.window.showErrorMessage("Please authenticate first");return}if(await o.window.showWarningMessage(`Delete server "${t.label}"?`,{modal:!0},"Delete")==="Delete")try{await m.deleteServer(t.id,e),o.window.showInformationMessage("Server deleted successfully"),h.refresh()}catch(r){o.window.showErrorMessage(`Failed to delete server: ${r}`)}}function H(t){return`
	<!DOCTYPE html>
	<html>
	<head>
		<title>MCP Server Details</title>
		<style>
			body { font-family: var(--vscode-font-family); padding: 20px; }
			.section { margin-bottom: 20px; }
			.tools { display: flex; flex-wrap: wrap; gap: 10px; }
			.tool { background: var(--vscode-button-background); padding: 8px; border-radius: 4px; }
			pre { background: var(--vscode-textBlockQuote-background); padding: 10px; border-radius: 4px; }
		</style>
	</head>
	<body>
		<h1>${t.name}</h1>
		<div class="section">
			<h3>Description</h3>
			<p>${t.description}</p>
		</div>
		<div class="section">
			<h3>Details</h3>
			<p><strong>ID:</strong> ${t.id}</p>
			<p><strong>Version:</strong> ${t.version}</p>
			<p><strong>Endpoint:</strong> ${t.endpoint}</p>
			<p><strong>Owner:</strong> ${t.owner}</p>
			<p><strong>Team:</strong> ${t.team}</p>
		</div>
		<div class="section">
			<h3>Tools</h3>
			<div class="tools">
				${t.tools.map(e=>`<div class="tool">${e.name}</div>`).join("")}
			</div>
		</div>
		<div class="section">
			<h3>Authentication Methods</h3>
			<p>${t.auth_methods.join(", ")}</p>
		</div>
		<div class="section">
			<h3>Tags</h3>
			<p>${t.tags.join(", ")}</p>
		</div>
	</body>
	</html>`}function K(){console.log("MCP Registry extension deactivated")}0&&(module.exports={activate,deactivate});
